
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPERIODleftCOMMAleftLPARENRPARENACCESSPATTERN COMMA IMPLIES INTEGER LPAREN PERIOD QUOTEDSTRING REALNUMBER RPAREN SIGNEDINTEGER SIGNEDREALNUMBER STRING VARIABLE WHITESPACEprogram : atom PERIOD\n             | VARIABLE tuple PERIOD\n             | latom IMPLIES atomlist PERIOD\n             | program programlatom : atomatomlist : atom\n         | atom COMMA atomlistatom : relation tuplerelation : STRING\n                | STRING ACCESSPATTERNtuple : LPAREN termlist RPARENtermlist : term \n              | term COMMA termlistterm : constant \n              | VARIABLEconstantlist : constant \n              | constant COMMA constantlistconstant : number \n              | QUOTEDSTRINGnumber : INTEGER \n              | SIGNEDINTEGER \n              | REALNUMBER \n              | SIGNEDREALNUMBER'
    
_lr_action_items = {'VARIABLE':([0,1,7,8,10,14,28,29,],[3,3,3,-1,18,-2,18,-3,]),'STRING':([0,1,7,8,11,14,29,30,],[6,6,6,-1,6,-2,-3,6,]),'$end':([1,7,8,14,29,],[0,-4,-1,-2,-3,]),'PERIOD':([2,9,12,25,26,27,32,],[8,14,-8,29,-6,-11,-7,]),'IMPLIES':([2,4,12,27,],[-5,11,-8,-11,]),'LPAREN':([3,5,6,13,],[10,10,-9,-10,]),'ACCESSPATTERN':([6,],[13,]),'QUOTEDSTRING':([10,28,],[20,20,]),'INTEGER':([10,28,],[21,21,]),'SIGNEDINTEGER':([10,28,],[22,22,]),'REALNUMBER':([10,28,],[23,23,]),'SIGNEDREALNUMBER':([10,28,],[24,24,]),'COMMA':([12,16,17,18,19,20,21,22,23,24,26,27,],[-8,28,-14,-15,-18,-19,-20,-21,-22,-23,30,-11,]),'RPAREN':([15,16,17,18,19,20,21,22,23,24,31,],[27,-12,-14,-15,-18,-19,-20,-21,-22,-23,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,1,7,],[1,7,7,]),'atom':([0,1,7,11,30,],[2,2,2,26,26,]),'latom':([0,1,7,],[4,4,4,]),'relation':([0,1,7,11,30,],[5,5,5,5,5,]),'tuple':([3,5,],[9,12,]),'termlist':([10,28,],[15,31,]),'term':([10,28,],[16,16,]),'constant':([10,28,],[17,17,]),'number':([10,28,],[19,19,]),'atomlist':([11,30,],[25,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> atom PERIOD','program',2,'p_program','dlexerparser.py',116),
  ('program -> VARIABLE tuple PERIOD','program',3,'p_program','dlexerparser.py',117),
  ('program -> latom IMPLIES atomlist PERIOD','program',4,'p_program','dlexerparser.py',118),
  ('program -> program program','program',2,'p_program','dlexerparser.py',119),
  ('latom -> atom','latom',1,'p_latom','dlexerparser.py',132),
  ('atomlist -> atom','atomlist',1,'p_atomlist','dlexerparser.py',139),
  ('atomlist -> atom COMMA atomlist','atomlist',3,'p_atomlist','dlexerparser.py',140),
  ('atom -> relation tuple','atom',2,'p_atom','dlexerparser.py',147),
  ('relation -> STRING','relation',1,'p_relation','dlexerparser.py',158),
  ('relation -> STRING ACCESSPATTERN','relation',2,'p_relation','dlexerparser.py',159),
  ('tuple -> LPAREN termlist RPAREN','tuple',3,'p_tuple','dlexerparser.py',166),
  ('termlist -> term','termlist',1,'p_termlist','dlexerparser.py',171),
  ('termlist -> term COMMA termlist','termlist',3,'p_termlist','dlexerparser.py',172),
  ('term -> constant','term',1,'p_term','dlexerparser.py',179),
  ('term -> VARIABLE','term',1,'p_term','dlexerparser.py',180),
  ('constantlist -> constant','constantlist',1,'p_constantlist','dlexerparser.py',188),
  ('constantlist -> constant COMMA constantlist','constantlist',3,'p_constantlist','dlexerparser.py',189),
  ('constant -> number','constant',1,'p_constant','dlexerparser.py',193),
  ('constant -> QUOTEDSTRING','constant',1,'p_constant','dlexerparser.py',194),
  ('number -> INTEGER','number',1,'p_number','dlexerparser.py',199),
  ('number -> SIGNEDINTEGER','number',1,'p_number','dlexerparser.py',200),
  ('number -> REALNUMBER','number',1,'p_number','dlexerparser.py',201),
  ('number -> SIGNEDREALNUMBER','number',1,'p_number','dlexerparser.py',202),
]
